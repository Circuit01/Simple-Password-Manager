import tkinter as tk
from tkinter import messagebox
from tkinter import simpledialog
import json
import random
import string
import pyperclip  # For clipboard functionality

# Function to save passwords and master password to a JSON file
def save_data(data, filename):
    with open(filename, 'w') as file:
        json.dump(data, file)

# Function to load passwords and master password from a JSON file
def load_data(filename):
    try:
        with open(filename, 'r') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {'passwords': {}, 'master_password': None}

# Function to generate a random password
def generate_password():
    length = simpledialog.askinteger("Generate Password", "Enter the desired length of the new password:")
    num_capitals = simpledialog.askinteger("Generate Password", "Enter the number of uppercase letters:")
    num_special_chars = simpledialog.askinteger("Generate Password", "Enter the number of special characters:")
    num_numbers = simpledialog.askinteger("Generate Password", "Enter the number of numbers:")
    label = simpledialog.askstring("Generate Password", "Enter a label for this password:")

    if None in (length, num_capitals, num_special_chars, num_numbers, label):
        return  # User canceled

    lowercase_letters = string.ascii_lowercase
    uppercase_letters = string.ascii_uppercase
    special_chars = "!@#$%^&*()_+-=[]{}|;:,.<>?/"
    numbers = string.digits

    password = []

    # Add required number of uppercase letters
    password.extend(random.choice(uppercase_letters) for _ in range(num_capitals))

    # Add required number of special characters
    password.extend(random.choice(special_chars) for _ in range(num_special_chars))

    # Add required number of numbers
    password.extend(random.choice(numbers) for _ in range(num_numbers))

    # Add remaining characters with lowercase letters
    remaining_length = length - (num_capitals + num_special_chars + num_numbers)
    password.extend(random.choice(lowercase_letters) for _ in range(remaining_length))

    # Shuffle the password
    random.shuffle(password)

    generated_password = ''.join(password)
    data['passwords'][label] = generated_password
    save_data(data, 'passwords.json')
    update_password_listbox()
    messagebox.showinfo("Password Generated", f"Password for '{label}' has been generated and saved.")

# Function to add a new password
def add_password():
    website = simpledialog.askstring("Add Password", "Enter the website or service name:")
    if website is None:
        return  # User canceled

    password = simpledialog.askstring("Add Password", f"Enter the password for '{website}':", show='*')
    if password is None:
        return  # User canceled

    # Confirm the password
    confirm_password = simpledialog.askstring("Confirm Password", f"Confirm the password for '{website}':", show='*')
    if confirm_password is None:
        return  # User canceled

    if password == confirm_password:
        data['passwords'][website] = password
        save_data(data, 'passwords.json')
        update_password_listbox()
        messagebox.showinfo("Password Added", f"Password for '{website}' has been added.")
    else:
        messagebox.showerror("Password Mismatch", "Passwords do not match. Password not saved.")

# Function to retrieve and reveal a password
def reveal_password():
    selected_item = passwords_listbox.curselection()
    if not selected_item:
        messagebox.showwarning("No Selection", "Please select a password to reveal.")
        return

    label = passwords_listbox.get(selected_item)
    password = data['passwords'].get(label)
    if password:
        master_password = simpledialog.askstring("Master Password", "Enter the master password:", show='*')
        if master_password is None:
            return  # User canceled
        if master_password == data['master_password']:
            pyperclip.copy(password)  # Copy password to clipboard
            messagebox.showinfo(f"Password for '{label}'", "Password copied to clipboard.")
        else:
            messagebox.showerror("Incorrect Master Password", "Incorrect master password. Access denied.")
    else:
        messagebox.showwarning("Password not found", f"No password found for '{label}'.")

# Function to edit a password
def edit_password():
    selected_item = passwords_listbox.curselection()
    if not selected_item:
        messagebox.showwarning("No Selection", "Please select a password to edit.")
        return

    label = passwords_listbox.get(selected_item)
    password = data['passwords'].get(label)

    # Confirm the master password
    master_password = simpledialog.askstring("Master Password", "Enter the master password:", show='*')
    if master_password is None:
        return  # User canceled
    if master_password != data['master_password']:
        messagebox.showerror("Incorrect Master Password", "Incorrect master password. Access denied.")
        return

    # Edit the password
    new_password = simpledialog.askstring("Edit Password", f"Edit the password for '{label}':", show='*')
    if new_password is None:
        return  # User canceled

    # Confirm the new password
    confirm_new_password = simpledialog.askstring("Confirm New Password", f"Confirm the new password for '{label}':", show='*')
    if confirm_new_password is None:
        return  # User canceled

    if new_password == confirm_new_password:
        data['passwords'][label] = new_password
        save_data(data, 'passwords.json')
        update_password_listbox()
        messagebox.showinfo("Password Updated", f"Password for '{label}' has been updated.")
    else:
        messagebox.showerror("Password Mismatch", "Passwords do not match. Password not updated.")

# Function to remove a password
def remove_password():
    selected_item = passwords_listbox.curselection()
    if not selected_item:
        messagebox.showwarning("No Selection", "Please select a password to remove.")
        return

    label = passwords_listbox.get(selected_item)

    # Confirm the master password
    master_password = simpledialog.askstring("Master Password", "Enter the master password:", show='*')
    if master_password is None:
        return  # User canceled
    if master_password != data['master_password']:
        messagebox.showerror("Incorrect Master Password", "Incorrect master password. Access denied.")
        return

    # Confirm the deletion
    confirm = messagebox.askokcancel("Confirm Removal", f"Are you sure you want to permanently delete the password for '{label}'?")
    if confirm:
        data['passwords'].pop(label, None)
        save_data(data, 'passwords.json')
        update_password_listbox()
        messagebox.showinfo("Password Removed", f"Password for '{label}' has been removed.")

# Function to create or change the master password
def create_master_password():
    global data
    master_password = simpledialog.askstring("Create/Change Master Password", "Enter the master password:", show='*')
    if master_password is not None:
        data['master_password'] = master_password
        save_data(data, 'passwords.json')
        messagebox.showinfo("Master Password Set/Changed", "Master password has been set/changed successfully.")

# Function to update the list of passwords
def update_password_listbox():
    passwords_listbox.delete(0, tk.END)
    labels = data['passwords'].keys()
    for label in labels:
        passwords_listbox.insert(tk.END, label)

# Create the main window
root = tk.Tk()
root.title("Password Manager")

# Load passwords and master password from the JSON file
data = load_data('passwords.json')

# Ensure the 'passwords' key exists in the data dictionary
if 'passwords' not in data:
    data['passwords'] = {}

# Create buttons for adding, generating, and retrieving passwords
add_button = tk.Button(root, text="Add Password (Alt+A)", command=add_password)
generate_button = tk.Button(root, text="Generate Password (Alt+G)", command=generate_password)
create_master_password_button = tk.Button(root, text="Create/Change Master Password (Alt+C)", command=create_master_password)

add_button.pack(pady=10)
generate_button.pack(pady=5)
create_master_password_button.pack(pady=5)

# Create a listbox to display passwords and buttons for revealing, editing, and removing passwords
passwords_listbox = tk.Listbox(root)
reveal_button = tk.Button(root, text="Reveal Password (Alt+R)", command=reveal_password)
edit_button = tk.Button(root, text="Edit Password (Alt+E)", command=edit_password)
remove_button = tk.Button(root, text="Remove Password (Alt+D)", command=remove_password)

passwords_listbox.pack()
reveal_button.pack(side=tk.LEFT, padx=5)
edit_button.pack(side=tk.LEFT, padx=5)
remove_button.pack(side=tk.LEFT, padx=5)

# Update the list of passwords
update_password_listbox()

# Keyboard shortcuts
root.bind("<Alt-a>", lambda event: add_password())
root.bind("<Alt-g>", lambda event: generate_password())
root.bind("<Alt-c>", lambda event: create_master_password())
root.bind("<Alt-r>", lambda event: reveal_password())
root.bind("<Alt-e>", lambda event: edit_password())
root.bind("<Alt-d>", lambda event: remove_password())

root.mainloop()
